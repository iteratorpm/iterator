/ _dropdown.html.slim
/ Usage:
/ = render partial: "shared/dropdown", locals: {
/   form: form,               # form object (optional)
/   record: story,            # model instance
/   column: :estimate,        # attribute name
/   options: estimate_options,# array of [value, label] pairs
/   selected: story.estimate, # currently selected value (optional)
/   searchable: false,        # whether to show search
/   icon_method: :story_estimate_icon # method to call for icons (optional)
/ }

- selected_value = local_assigns[:selected] || record.public_send(column)
- input_name = local_assigns[:form] ? "#{local_assigns[:form].object_name}[#{column}]" : "#{record.model_name.singular}[#{column}]"

= content_tag :div, data: { controller: "dropdown" }, class: "relative flex-grow" do
  = hidden_field_tag input_name, selected_value, data: { dropdown_target: "input" }

  / Button - Closed State Display
  = button_tag type: "button",
              data: { action: "click->dropdown#toggle", dropdown_target: "button" },
              id: "#{column}_dropdown_button",
              class: "flex items-center justify-between gap-2 bg-transparent h-7 p-0 border-none cursor-pointer w-full" do
    .flex.items-center.gap-2 data-dropdown-target="selected"
      - if selected_value.present?
        = render "shared/dropdown_item",
                icon: icon_method ? send(icon_method, selected_value) : nil,
                label: options.find { |v, l| v.to_s == selected_value.to_s }&.last || selected_value.to_s
      - else
        span.text-gray-400 Select option
    = inline_svg_tag 'icons/chevron-down.svg', class: "w-4 h-4 text-gray-500 ml-2"

  / Dropdown Menu
  .hidden.absolute.z-10.top-full.left-0.w-full.rounded-md.bg-white.shadow-lg.ring-1.ring-black.ring-opacity-5.max-h-60.overflow-auto.mt-1 data-dropdown-target="menu"
    - if searchable
      .p-2.border-b
        = text_field_tag :search, nil,
                        placeholder: "Search...",
                        class: "w-full px-2 py-1 text-sm border rounded",
                        data: { dropdown_target: "search", action: "input->dropdown#filter" }

    ul.py-1.text-sm.text-gray-700 role="menu" data-dropdown-target="items"
      - options.each do |value, label|
        li.relative data-value=value data-action="click->dropdown#select" data-dropdown-target="item" role="menuitem" class="#{'bg-gray-100' if value.to_s == selected_value.to_s}"
          = link_to "#", class: "flex items-center w-full pl-3 py-0.5 h-8 leading-6 hover:bg-gray-50 cursor-pointer" do
            .dropdown_content
              = render "shared/dropdown_item",
                      icon: icon_method ? send(icon_method, value) : nil,
                      label: label
